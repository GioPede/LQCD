#!/bin/bash

# Function for breaking out of execution if there are not enough parameters
function badUsage {
	echo "
Bad usage! Arguments are missing:
   ./runGFR -i INPUTFOLDER [-n NAME] [-t TIME] [-m EMAIL]

Try -h for further help
"
	exit
}

function unrecognized {
	echo "Available options are:
   ./runGFR -i INPUTFOLDER [-n NAME] [-t TIME] [-m EMAIL]

Try -h for further help
"
	exit
}

# Help function
function help {
	echo -e "
\t     This is GFR version 1.0 made by Giovanni Pederiva.

The program reads a set of Pure Gauge Field configurations and computes
observables on them.

Usage:
   ./runGFR -i INPUT [-n NAME] [-t TIME] [-m EMAIL]

Where the options flags are:
   -h             -> show this help
   -i INPUTFOLDER -> specify the input folder where the configurations are
                     located, together with an input file
   -n NAME        -> OPTIONAL the name of the process and output subfolder
                     (default:N_Nt_Pnprocs)
   -t TIME        -> OPTIONAL maximum time of execution  (default:24h)
                     format must be hh:mm:ss
   -m EMAIL       -> OPTIONAL sets up email notifications on the job
"
	exit
}

# Set variables given via command line arguments
while getopts :i:n:t:m:h option; do
	case "${option}" in
		i) INPUTFOLDER=$OPTARG;;
		n) NAME=$OPTARG;;
		t) TIME=$OPTARG;;
		m) EMAIL=$OPTARG;;
		h) help;;
		\?)echo -e "\nUnrecognized option: $OPTARG" 1>&2; unrecognized ;;
		:) echo -e "\nInvalid option: $OPTARG requires an argument" 1>&2; unrecognized;;
	esac
done

# Check if required paramteres are given
if [[ -z ${INPUTFOLDER} ]];
	then badUsage;
fi

# Clean inputfolder string
if [ ${INPUTFOLDER: -1} == "/" ]; then
	INPUTFOLDER=${INPUTFOLDER: : -1}
fi

# Find the input file
INPUT=${INPUTFOLDER}/*.input

# Compute the nuber of processors from input
line1=$(sed -n '1{p;q;}' ${INPUT})
line2=$(sed -n '2{p;q;}' ${INPUT})
line4=$(sed -n '4{p;q;}' ${INPUT})
lattice=($line1)
sublattice=($line2)
hotcold=($line4)
PROCS=$(( ${lattice[0]} / ${sublattice[0]} * ${lattice[1]} / ${sublattice[1]} * ${lattice[2]} / ${sublattice[2]} * ${lattice[3]} / ${sublattice[3]} ))

# Set default arguments
if [[ -z ${NAME} ]]; then NAME="${lattice[0]}_P${PROCS}"; fi
if [[ -z ${TIME} ]]; then TIME="24:00:00"; fi

# Check time format
while :; do
	if [[ $TIME =~ ^([0-9]{2}):([0-9]{2}):([0-9]{2})$ ]]; then
	    if (( BASH_REMATCH[3] < 60 ))\
	        && (( BASH_REMATCH[2] < 60 )); then
	        break
	    fi
	fi
	echo "Wrong time format. Please use the hh:mm:ss format"
	exit
  # FIGATA!!! read -p "Wrong time format. Please use the HH:MM:SS format " -e Time
done

# Generate inputfile list
FILELIST=${INPUTFOLDER}/*.bin

mkdir -p ${INPUTFOLDER}/flow

# Write the SLURM launche file
LAUNCHFILE="launcher.sh"
echo "#!/bin/bash"                     >  $LAUNCHFILE
echo "#SBATCH --partition=normal"      >> $LAUNCHFILE
echo "#SBATCH --ntasks="$PROCS         >> $LAUNCHFILE
echo "#SBATCH --time="$TIME            >> $LAUNCHFILE
echo "#SBATCH --job-name="R$NAME        >> $LAUNCHFILE

# Optional email lines
if [[ -n ${EMAIL} ]]; then
	echo "#SBATCH --mail-type=ALL"     >> $LAUNCHFILE
	echo "#SBATCH --mail-user="$EMAIL  >> $LAUNCHFILE
fi


# Write the main command line
echo "mpirun -np $PROCS build/flow" ${INPUT} "$NAME" ${FILELIST} >> $LAUNCHFILE
#sbatch $LAUNCHFILE
bash $LAUNCHFILE
#rm $LAUNCHFILE
